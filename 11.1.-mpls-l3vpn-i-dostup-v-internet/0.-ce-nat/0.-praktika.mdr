# Практика

Провайдер выдаёт клиенту пул публичных адресов, в который тот транслирует свои внутренние. Всё, что остаётся сделать провайдеру — настроить маршрутизацию между VRF и глобальной таблицей.  
Учитывая, что трансляция будет на CE, нужно выбрать только один филиал, пусть это будет _TARS\_2_ — там как раз у нас линковая сеть публичная — 100.0.1.0/30.

![](https://habrastorage.org/getpro/habr/post_images/1c5/27e/79f/1c527e79fd5bd74c50ad83ee5c9baa18.png)

Как видите, для этого теста нам нужно что-то в качестве Интернета и компьютер, которому доступ туда нужен.  
В GNS есть такой чудесный объект, как VPCS, который прекрасно подходит на эту роль.  
На _TARS\_2_ нужно настроить NAT, ниже его конфигурация:

```text
TARS_2(config)#interface Loopback0
TARS_2(config-if)#ip address 172.16.255.2 255.255.255.255

TARS_2(config)#interface FastEthernet0/0
TARS_2(config-if)#description To Linkmeup
TARS_2(config-if)#ip address 100.0.1.2 255.255.255.252
TARS_2(config-if)#ip nat outside

TARS_2(config)#interface FastEthernet0/1
TARS_2(config-if)#description To LAN
TARS_2(config-if)#ip address 172.16.1.1 255.255.255.0
TARS_2(config-if)#ip nat inside

TARS_2(config)#router bgp 64502
TARS_2(config-router)#network 172.16.1.0 mask 255.255.255.0
TARS_2(config-router)#network 172.16.255.2 mask 255.255.255.255
TARS_2(config-router)#neighbor 100.0.1.1 remote-as 64500

TARS_2(config)#ip nat inside source list 100 interface FastEthernet0/0 overload

TARS_2(config)#access-list 100 deny ip 172.16.0.0 0.0.255.255 172.16.0.0 0.0.255.255
TARS_2(config)#access-list 100 permit ip 172.16.0.0 0.0.255.255 any
```

access-list 100 состоит из двух строк — первая запрещает трансляцию адресов для пакетов, которые идут из своей сети в свою же сеть, находящуюся на другом конце провайдера.  
Вторая строка разрешает трансляцию только для адресов своей сети. Если вдруг вы пропишите permit ip any any, то сразу же упадёт BGP-сессия с _Linkmeup\_R3_.  
Подробности по настройке NAT были освещены в [пятой части СДСМ](https://linkmeup.ru/blog/16.html).

Конфигурация Интернета:

```text
Internet(config)#interface Loopback0
Internet(config-if)#ip address 101.0.0.101 255.255.255.255

Internet(config)#interface FastEthernet0/0
Internet(config-if)#description To linkmeup
Internet(config-if)#ip address 101.0.0.1 255.255.255.252

Internet(config)#router bgp 64501
Internet(config-router)#network 101.0.0.0 mask 255.255.240.0
Internet(config-router)#neighbor 101.0.0.2 remote-as 64500

Internet(config)#ip route 101.0.0.0 255.255.240.0 Null0
```

Настройки BGP на _Internet_ точно такие же, как были в Балаган-Телекоме в [восьмом выпуске](https://linkmeup.ru/blog/65.html), мы только позволили себе некоторые вольности с IP-адресами.  
Интерфейс Loopback 0 на узле с именем _Internet_ олицетворяет собой весь интернет. Пинг до него и будем проверять.  
Соответствующим образом настроен и _Linkmeup\_R1_ для связи с _Internet_:

```text
Linkmeup_R1(config)#interface FastEthernet1/1
Linkmeup_R1(config-if)#description To Balagan-Telecom
Linkmeup_R1(config-if)#ip address 101.0.0.2 255.255.255.252

Linkmeup_R1(config)#router bgp 64500
Linkmeup_R1(config-router)#network 100.0.0.0 mask 255.255.254.0
Linkmeup_R1(config-router)#network 101.0.0.0 mask 255.255.255.252
Linkmeup_R1(config-router)#neighbor 101.0.0.1 remote-as 64501

Linkmeup_R1(config)#ip route 100.0.0.0 255.255.254.0 Null0
```

Что же касается доступа в Интернет из VPN, то в данном случае конфигурацию нужно менять только на ближайшем к CE PE — в нашем случае _Linkmeup\_R3_.

**1.** Создадим маршрут по умолчанию для VRF TARS. Это для того, чтобы пакеты, пришедшие от _TARS\_2_ не были отброшены и знали куда двигаться.

```text
Linkmeup_R3(config)#ip route vrf TARS 0.0.0.0 0.0.0.0 101.0.0.2 global
```

Обратить внимание здесь нужно на две вещи:  
Ключевое слово **global**. Оно говорит о том, что Next Hop \(101.0.0.2\) нужно искать в **глобальной** таблице маршрутизации.  
В качестве адрес Next-Hop выбран линковый адрес _Linkmeup\_R1_ в сторону Интернета. Почему не Loopback, как мы любим? Это позволяет избежать так называемого blackholing’a. Дело в том, что loopback всегда доступен, а в случае падения канала между нашим шлюзом \(_Linkmeup\_R1_\) и Интернетом _TARS\_2_ этого никак не заметит и продолжит слать трафик на _Linkmeup\_R3_, а тот, тоже ничего не подозревая, на _Linkmeup\_R1_. Если же мы укажем линковый адрес, то он пропадёт из таблиц маршрутизации сразу, как упадёт линия.

В результате предыдущей операции на Linkmeup\_3 появляется маршрут по умолчанию:  
![](https://habrastorage.org/getpro/habr/post_images/289/57d/6f1/28957d6f197ffc16cc71f86ccad647f6.png)

**2.** Теперь его нужно сообщить клиенту, чтобы у того тоже появился маршрут по умолчанию \(хотя он мог бы настроить его и самостоятельно\).

```text
address-family ipv4 vrf TARS
neighbor 100.0.1.2 default-originate
```

Результат:  
![](https://habrastorage.org/getpro/habr/post_images/7ab/9ec/077/7ab9ec077bf119c304671272fa0453ac.png)

Итак, маршруты _туда_, то есть в Интернет, у нас уже есть, теперь что касается _обратно_.

**3.** На _Linkmeup\_R3_ настроим статический маршрут для сети 100.0.1.0/30:

```text
ip route 100.0.1.0 255.255.255.252 FastEthernet1/0
```

Зачем нам это нужно? Чтобы был маршрут, логично ведь. Если из Интернета пакет прилетит на _Linkmeup\_R3_, а на нём не будет маршрута к 100.0.1.0/30 в глобальной таблице маршрутизации \(_в VRF-то он, конечно, будет_\), пакет будет отброшен.  
Было:  
![](https://habrastorage.org/getpro/habr/post_images/809/eef/7cf/809eef7cf03309a9ade69c0dbe2ca06e.png)  
_Маршрут-то есть, да только не туда. Пакет не будет отброшен, но и до адресата не дойдёт._

Стало:  
![](https://habrastorage.org/getpro/habr/post_images/9a6/178/fe9/9a6178fe9d65c6726bc0a7975d0249e9.png)

**4.** Далее об этой сети нужно сообщить BGP-соседям — о ней должны узнать все. В частности нас интересует _Linkmeup\_R1_.

```text
router bgp 64500
network 100.0.1.0 mask 255.255.255.252
```

Результат:  
![](https://habrastorage.org/getpro/habr/post_images/a11/860/0fb/a118600fb2d18a197154aaf44be82f8e.png)

> BGP в принципе и прежде знал об этой сети, но только в address-family ipv4 vrf TARS, куда она попадала с помощью команды **redistribute connected**. В глобальной же таблице маршрутизации её не было.

Итак, всё готово, проверяем:  
![](https://habrastorage.org/getpro/habr/post_images/92a/a74/aa9/92aa74aa92121f6159abb3cafc3a0730.png)

Это говорит о том, что заработал Route Leaking, то есть доступ из VRF в глобальную таблицу маршрутизации и наоборот работает.

Проверка доступности Интернета с компьютера — это формальность, которая покажет, что мы правильно настроили NAT. Фактически вся магия происходит на _Linkmeup\_R3_, а знакомая нам трансляция на _TARS\_2_, то есть вещи это по большому счёту не связанные, и, если Интернет доступен с _TARS\_2_, он будет доступен и с _PC1_.  
Однако мы проверим:  
![](https://habrastorage.org/getpro/habr/post_images/555/138/da8/555138da8d5a816ab464526911a2ceac.png)

Интернет доступен. Ура!